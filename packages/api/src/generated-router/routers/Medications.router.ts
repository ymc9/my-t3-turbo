/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import * as _Schema from "@zenstackhq/runtime/zod/input";

import { db } from ".";
import { createTRPCRouter, procedure } from "../../trpc";
import { checkMutate, checkRead } from "../helper";

const $Schema: typeof _Schema = (_Schema as any).default ?? _Schema;

export default function createRouter() {
  return createTRPCRouter({
    aggregate: procedure
      .input($Schema.MedicationsInputSchema.aggregate)
      .query(({ ctx, input }) =>
        checkRead(db(ctx).medications.aggregate(input as any)),
      ),

    createMany: procedure
      .input($Schema.MedicationsInputSchema.createMany.optional())
      .mutation(async ({ ctx, input }) =>
        checkMutate(db(ctx).medications.createMany(input as any)),
      ),

    create: procedure
      .input($Schema.MedicationsInputSchema.create)
      .mutation(async ({ ctx, input }) =>
        checkMutate(db(ctx).medications.create(input as any)),
      ),

    deleteMany: procedure
      .input($Schema.MedicationsInputSchema.deleteMany.optional())
      .mutation(async ({ ctx, input }) =>
        checkMutate(db(ctx).medications.deleteMany(input as any)),
      ),

    delete: procedure
      .input($Schema.MedicationsInputSchema.delete)
      .mutation(async ({ ctx, input }) =>
        checkMutate(db(ctx).medications.delete(input as any)),
      ),

    findFirst: procedure
      .input($Schema.MedicationsInputSchema.findFirst.optional())
      .query(({ ctx, input }) =>
        checkRead(db(ctx).medications.findFirst(input as any)),
      ),

    findFirstOrThrow: procedure
      .input($Schema.MedicationsInputSchema.findFirst.optional())
      .query(({ ctx, input }) =>
        checkRead(db(ctx).medications.findFirstOrThrow(input as any)),
      ),

    findMany: procedure
      .input($Schema.MedicationsInputSchema.findMany.optional())
      .query(({ ctx, input }) =>
        checkRead(db(ctx).medications.findMany(input as any)),
      ),

    findUnique: procedure
      .input($Schema.MedicationsInputSchema.findUnique)
      .query(({ ctx, input }) =>
        checkRead(db(ctx).medications.findUnique(input as any)),
      ),

    findUniqueOrThrow: procedure
      .input($Schema.MedicationsInputSchema.findUnique)
      .query(({ ctx, input }) =>
        checkRead(db(ctx).medications.findUniqueOrThrow(input as any)),
      ),

    groupBy: procedure
      .input($Schema.MedicationsInputSchema.groupBy)
      .query(({ ctx, input }) =>
        checkRead(db(ctx).medications.groupBy(input as any)),
      ),

    updateMany: procedure
      .input($Schema.MedicationsInputSchema.updateMany)
      .mutation(async ({ ctx, input }) =>
        checkMutate(db(ctx).medications.updateMany(input as any)),
      ),

    update: procedure
      .input($Schema.MedicationsInputSchema.update)
      .mutation(async ({ ctx, input }) =>
        checkMutate(db(ctx).medications.update(input as any)),
      ),

    upsert: procedure
      .input($Schema.MedicationsInputSchema.upsert)
      .mutation(async ({ ctx, input }) =>
        checkMutate(db(ctx).medications.upsert(input as any)),
      ),

    count: procedure
      .input($Schema.MedicationsInputSchema.count.optional())
      .query(({ ctx, input }) =>
        checkRead(db(ctx).medications.count(input as any)),
      ),
  } satisfies TRPCRouterRecord);
}
