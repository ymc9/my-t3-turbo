/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import * as _Schema from "@zenstackhq/runtime/zod/input";

import { db } from ".";
import { createTRPCRouter, procedure } from "../../trpc";
import { checkMutate, checkRead } from "../helper";

const $Schema: typeof _Schema = (_Schema as any).default ?? _Schema;

export default function createRouter() {
  return createTRPCRouter({
    aggregate: procedure
      .input($Schema.EventCalendarInputSchema.aggregate)
      .query(({ ctx, input }) =>
        checkRead(db(ctx).eventCalendar.aggregate(input as any)),
      ),

    createMany: procedure
      .input($Schema.EventCalendarInputSchema.createMany.optional())
      .mutation(async ({ ctx, input }) =>
        checkMutate(db(ctx).eventCalendar.createMany(input as any)),
      ),

    create: procedure
      .input($Schema.EventCalendarInputSchema.create)
      .mutation(async ({ ctx, input }) =>
        checkMutate(db(ctx).eventCalendar.create(input as any)),
      ),

    deleteMany: procedure
      .input($Schema.EventCalendarInputSchema.deleteMany.optional())
      .mutation(async ({ ctx, input }) =>
        checkMutate(db(ctx).eventCalendar.deleteMany(input as any)),
      ),

    delete: procedure
      .input($Schema.EventCalendarInputSchema.delete)
      .mutation(async ({ ctx, input }) =>
        checkMutate(db(ctx).eventCalendar.delete(input as any)),
      ),

    findFirst: procedure
      .input($Schema.EventCalendarInputSchema.findFirst.optional())
      .query(({ ctx, input }) =>
        checkRead(db(ctx).eventCalendar.findFirst(input as any)),
      ),

    findFirstOrThrow: procedure
      .input($Schema.EventCalendarInputSchema.findFirst.optional())
      .query(({ ctx, input }) =>
        checkRead(db(ctx).eventCalendar.findFirstOrThrow(input as any)),
      ),

    findMany: procedure
      .input($Schema.EventCalendarInputSchema.findMany.optional())
      .query(({ ctx, input }) =>
        checkRead(db(ctx).eventCalendar.findMany(input as any)),
      ),

    findUnique: procedure
      .input($Schema.EventCalendarInputSchema.findUnique)
      .query(({ ctx, input }) =>
        checkRead(db(ctx).eventCalendar.findUnique(input as any)),
      ),

    findUniqueOrThrow: procedure
      .input($Schema.EventCalendarInputSchema.findUnique)
      .query(({ ctx, input }) =>
        checkRead(db(ctx).eventCalendar.findUniqueOrThrow(input as any)),
      ),

    groupBy: procedure
      .input($Schema.EventCalendarInputSchema.groupBy)
      .query(({ ctx, input }) =>
        checkRead(db(ctx).eventCalendar.groupBy(input as any)),
      ),

    updateMany: procedure
      .input($Schema.EventCalendarInputSchema.updateMany)
      .mutation(async ({ ctx, input }) =>
        checkMutate(db(ctx).eventCalendar.updateMany(input as any)),
      ),

    update: procedure
      .input($Schema.EventCalendarInputSchema.update)
      .mutation(async ({ ctx, input }) =>
        checkMutate(db(ctx).eventCalendar.update(input as any)),
      ),

    upsert: procedure
      .input($Schema.EventCalendarInputSchema.upsert)
      .mutation(async ({ ctx, input }) =>
        checkMutate(db(ctx).eventCalendar.upsert(input as any)),
      ),

    count: procedure
      .input($Schema.EventCalendarInputSchema.count.optional())
      .query(({ ctx, input }) =>
        checkRead(db(ctx).eventCalendar.count(input as any)),
      ),
  } satisfies TRPCRouterRecord);
}
