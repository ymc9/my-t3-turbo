// This is a sample model to get you started.

/// A sample data source using local sqlite db.
datasource db {
    provider = 'sqlite'
    url = 'file:./dev.db'
}

generator client {
    provider = "prisma-client-js"
}

plugin trpc {
    provider = "@zenstackhq/trpc"
    version = "v11"
    importCreateRouter = "../../trpc"
    importProcedure = "../../trpc"
    output   = "../api/src/generated-router"
}


/// Shape of the `auth()` function
type Auth {
    userId           String  @id
    organizationId   String?
    organizationRole String?

    @@auth
}

enum UserRole {
    admin
    user
}

model User {
    id              String       @id @default(nanoid())
    name            String
    email           String
    emailVerified   Boolean
    image           String?
    createdAt       DateTime     @default(now())
    updatedAt       DateTime     @updatedAt
    sessions        Session[]
    accounts        Account[]
    members         Member[]
    invitations     Invitation[]
    // eventsCalendar  EventCalendar[]

    username        String?
    displayUsername String?
    role            UserRole?    @default(user)
    banned          Boolean?
    banReason       String?
    banExpires      DateTime?

    changePassword  Boolean?     @default(false)

    patientUser     Patient[]    @relation("patientUser")

    createdAssets   Asset[]      @relation("createdAssets")
    updatedAssets   Asset[]      @relation("updatedAssets")
    deletedAssets   Asset[]      @relation("deletedAssets")

    @@allow('create,read', true)

    // only the user can update or delete their own profile
    @@allow('update,delete', auth().userId == id)

    @@unique([email])
    @@map("user")
}

model Asset {
    id             String        @id @default(nanoid())
    type           String
    createdAt      DateTime      @default(now())
    createdById    String?       @default(auth().userId)
    createdByUser  User?         @relation("createdAssets", fields: [createdById], references: [id], onDelete: SetNull)

    updatedAt      DateTime      @updatedAt
    updatedById    String?       @default(auth().userId)
    updatedByUser  User?         @relation("updatedAssets", fields: [updatedById], references: [id], onDelete: SetNull)

    deletedAt      DateTime?
    deletedById    String?
    deletedByUser  User?         @relation("deletedAssets", fields: [deletedById], references: [id], onDelete: SetNull)
    deleted        Boolean       @default(false) @omit
    @@deny('read', deleted)

    organizationId String?       @default(auth().organizationId) @allow('update', false)
    organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

    // Access rules
    @@deny('all', auth() == null)
    @@deny('all', auth().organizationId != organizationId)

    @@allow('all', auth().userId == createdById || (auth().organizationId == organizationId && (auth().organizationRole == 'owner' || auth().organizationRole == 'admin')))

    @@allow('read,create,update', organization.members?[userId == auth().userId && role != 'patient'])

    @@delegate(type)
    @@map("asset")
}

model Session {
    id                   String   @id @default(nanoid())
    expiresAt            DateTime
    token                String
    createdAt            DateTime @default(now())
    updatedAt            DateTime @updatedAt
    ipAddress            String?
    userAgent            String?
    userId               String
    user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    impersonatedBy       String?
    activeOrganizationId String?

    @@unique([token])
    @@map("session")
}

model Account {
    id                    String    @id @default(nanoid())
    accountId             String
    providerId            String
    userId                String
    user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    accessToken           String?
    refreshToken          String?
    idToken               String?
    accessTokenExpiresAt  DateTime?
    refreshTokenExpiresAt DateTime?
    scope                 String?
    password              String?   @omit
    createdAt             DateTime  @default(now())
    updatedAt             DateTime  @updatedAt

    @@map("account")
}

model Verification {
    id         String   @id @default(nanoid())
    identifier String
    value      String
    expiresAt  DateTime
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@map("verification")
}

model Organization {
    id          String       @id @default(nanoid())
    name        String
    slug        String?
    logo        String?
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
    metadata    String?

    members     Member[]
    invitations Invitation[]

    assets      Asset[]

    @@unique([slug])

    @@allow('create,read', true)

    @@map("organization")
}

enum MemberRole {
    owner
    admin
    secretary
    patient
    member
}

model Member {
    id             String       @id @default(nanoid())
    organizationId String
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    userId         String
    user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    role           String
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt

    // deny anonymous users
    @@deny('all', auth() == null)

    // deny access to members that don't belong to the user's active organization
    @@deny('all', auth().organizationId != organizationId)

    // allow read access to members that belong to the user's active organization
    @@allow('read', auth().organizationId == organizationId)

    @@map("member")
}

model Invitation {
    id             String       @id @default(nanoid())
    organizationId String
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    email          String
    role           String?
    status         String
    expiresAt      DateTime
    createdAt      DateTime     @default(now())
    updatedAt      DateTime?    @updatedAt
    inviterId      String
    user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)

    @@map("invitation")

    // allow read access to invitations that belong to the user's active organization and the user is the inviter
    @@allow('read', auth().userId == inviterId && auth().organizationId == organizationId)
}

// --------------------- BUSINESS RULES ---------------------

model Cid {
    id             String           @id @default(nanoid())
    code           String
    description    String

    createdAt      DateTime         @default(now())
    updatedAt      DateTime?        @updatedAt

    appointmentCid AppointmentCid[]

    @@unique([code])

    @@index([code])

    @@allow('read,create,delete', true)

    @@map("cid")
}

model AppointmentCid extends Asset {
    appointmentId String
    appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)

    cidId         String
    cid           Cid         @relation(fields: [cidId], references: [id], onDelete: Cascade)

    @@unique([appointmentId, cidId])
    // Allow patients to read their own vaccinations
    @@allow('read', appointment.patient.userId == auth().userId)

    @@map("appointment_cid")
}

enum AppointmentCategory {
    NORMAL
    FOLLOW_UP
}

enum AppointmentStatus {
    PENDING
    ONGOING
    CONFIRMED
    CANCELLED
    RESCHEDULED
    COMPLETED
    NO_SHOW
}


model Appointment extends Asset {
    motive              String
    subjective          String
    objective           String
    evaluation          String
    plan                String
    startDate           DateTime?
    endDate             DateTime?
    sickNoteDays        Int?
    category            AppointmentCategory?
    status              AppointmentStatus?

    followUpId          String?              @unique
    followUp            Appointment?         @relation("FollowUpAppointment", fields: [followUpId], references: [id])
    predecessorFollowUp Appointment?         @relation("FollowUpAppointment")

    cids                AppointmentCid[]
    allergies           Allergies[]
    medications         Medications[]
    comorbidities       Comorbidities[]

    patientId           String
    patient             Patient              @relation(fields: [patientId], references: [id], onDelete: Cascade)

    eventCalendar       EventCalendar?

    // Allow patients to read their own appointments
    @@allow('read', patient.userId == auth().userId)

    @@map("appointment")
}

enum Sex {
    male
    female
}

enum Race {
    black
    brown
    white
    yellow
    indigenous
}

enum CivilStatus {
    single
    married
    separated
    divorced
    widowed
}

enum BloodType {
    a_positive
    a_negative
    b_positive
    b_negative
    ab_positive
    ab_negative
    o_positive
    o_negative
}

enum GenderIdentity {
    cisgender
    transgender
    non_binary
}

model Patient extends Asset {
    // personal information
    name              String
    cpf               String
    cellphone         String
    email             String
    sex               Sex?
    responsible       String?
    nationality       String
    race              Race?

    // address
    state             String
    city              String
    zipcode           String
    neighborhood      String
    street            String
    number            String
    complement        String?

    // additional information
    occupation        String
    sexualOrientation String?
    civilStatus       CivilStatus?
    bloodType         BloodType?
    genderIdentity    GenderIdentity?

    password          String?

    // user can be patient of several clinics
    userId            String?
    user              User?           @relation("patientUser", fields: [userId], references: [id])

    appointments      Appointment[]

    vaccinations      Vaccinations[]
    allergies         Allergies[]
    medications       Medications[]
    examResults       ExamResults[]
    comorbidities     Comorbidities[]
    surgeries         Surgeries[]
    healthPlans       HealthPlans[]

    // Access rules
    @@allow('read', auth().userId == userId)

    // unique constraint to prevent duplicate patients of same user from being created
    // @@unique([userId, organizationId])

    @@map("patient")
}

model Vaccinations extends Asset {
    patientId            String
    patient              Patient            @relation(fields: [patientId], references: [id], onDelete: Cascade)

    vaccinationsValuesId String
    vaccinationsValues   VaccinationsValues @relation(fields: [vaccinationsValuesId], references: [id], onDelete: Cascade)

    // Allow patients to read their own vaccinations
    @@allow('read', patient.userId == auth().userId)

    @@map("vaccinations")
}

model VaccinationsValues {
    id           String         @id @default(nanoid())
    value        String         @unique
    createdAt    DateTime       @default(now())

    vaccinations Vaccinations[]

    // deny anonymous users
    @@deny('all', auth() == null)

    // allow read and create access to all users
    @@allow('create,read,update', true)

    @@map("vaccinations_values")
}

model Allergies extends Asset {
    patientId         String?
    patient           Patient?        @relation(fields: [patientId], references: [id], onDelete: Cascade)

    allergiesValuesId String
    allergiesValues   AllergiesValues @relation(fields: [allergiesValuesId], references: [id], onDelete: Cascade)

    appointmentId     String?
    appointment       Appointment?    @relation(fields: [appointmentId], references: [id], onDelete: Cascade)

    // Allow patients to read their own vaccinations
    @@allow('read', patient.userId == auth().userId)

    @@map("allergies")
}


model AllergiesValues {
    id        String      @id @default(nanoid())
    value     String      @unique
    createdAt DateTime    @default(now())

    allergies Allergies[]

    // deny anonymous users
    @@deny('all', auth() == null)

    // allow read and create access to all users
    @@allow('create,read,update', true)

    @@map("allergies_values")
}

model Medications extends Asset {
    patientId           String?
    patient             Patient?          @relation(fields: [patientId], references: [id], onDelete: Cascade)

    medicationsValuesId String
    medicationsValues   MedicationsValues @relation(fields: [medicationsValuesId], references: [id], onDelete: Cascade)

    appointmentId       String?
    appointment         Appointment?      @relation(fields: [appointmentId], references: [id], onDelete: Cascade)

    // Allow patients to read their own vaccinations
    @@allow('read', patient.userId == auth().userId)

    @@map("medications")
}

model MedicationsValues {
    id          String        @id @default(nanoid())
    value       String        @unique
    createdAt   DateTime      @default(now())

    medications Medications[]

    // deny anonymous users
    @@deny('all', auth() == null)

    // allow read and create access to all users
    @@allow('create,read,update', true)

    @@map("medications_values")
}

model ExamResults extends Asset {
    patientId           String
    patient             Patient           @relation(fields: [patientId], references: [id], onDelete: Cascade)

    examResultsValuesId String
    examResultsValues   ExamResultsValues @relation(fields: [examResultsValuesId], references: [id], onDelete: Cascade)

    result              String
    date                DateTime

    // Allow patients to read their own vaccinations
    @@allow('read', patient.userId == auth().userId)

    @@map("exam_results")
}

model ExamResultsValues {
    id          String        @id @default(nanoid())
    value       String        @unique
    createdAt   DateTime      @default(now())

    examResults ExamResults[]

    // deny anonymous users
    @@deny('all', auth() == null)

    // allow read and create access to all users
    @@allow('create,read,update', true)

    @@map("exam_results_values")
}

model Comorbidities extends Asset {
    patientId             String?
    patient               Patient?            @relation(fields: [patientId], references: [id], onDelete: Cascade)

    comorbiditiesValuesId String
    comorbiditiesValues   ComorbiditiesValues @relation(fields: [comorbiditiesValuesId], references: [id], onDelete: Cascade)

    appointmentId         String?
    appointment           Appointment?        @relation(fields: [appointmentId], references: [id], onDelete: Cascade)

    // Allow patients to read their own vaccinations
    @@allow('read', patient.userId == auth().userId)

    @@map("comorbidities")
}

model ComorbiditiesValues {
    id            String          @id @default(nanoid())
    value         String          @unique
    createdAt     DateTime        @default(now())

    comorbidities Comorbidities[]

    // deny anonymous users
    @@deny('all', auth() == null)

    // allow read and create access to all users
    @@allow('create,read,update,delete', true)

    @@map("comorbidities_values")
}

model Surgeries extends Asset {
    patientId         String
    patient           Patient         @relation(fields: [patientId], references: [id], onDelete: Cascade)

    surgeriesValuesId String
    surgeriesValues   SurgeriesValues @relation(fields: [surgeriesValuesId], references: [id], onDelete: Cascade)

    // Allow patients to read their own vaccinations
    @@allow('read', patient.userId == auth().userId)

    @@map("surgeries")
}

model SurgeriesValues {
    id        String      @id @default(nanoid())
    value     String      @unique
    createdAt DateTime    @default(now())

    surgeries Surgeries[]

    // deny anonymous users
    @@deny('all', auth() == null)

    // allow read and create access to all users
    @@allow('create,read,update,delete', true)

    @@map("surgeries_values")
}

model HealthPlans extends Asset {
    patientId           String
    patient             Patient           @relation(fields: [patientId], references: [id], onDelete: Cascade)

    healthPlansValuesId String
    healthPlansValues   HealthPlansValues @relation(fields: [healthPlansValuesId], references: [id], onDelete: Cascade)

    // Allow patients to read their own vaccinations
    @@allow('read', patient.userId == auth().userId)

    @@map("health_plans")
}

model HealthPlansValues {
    id          String        @id @default(nanoid())
    value       String        @unique
    createdAt   DateTime      @default(now())

    healthPlans HealthPlans[]

    // deny anonymous users
    @@deny('all', auth() == null)

    // allow read and create access to all users
    @@allow('create,read,update,delete', true)

    @@map("health_plans_values")
}

model DefaultObjectiveInformation extends Asset {
    text String?

    @@map("default_objective_information")
}

enum EventCalendarType {
    APPOINTMENT
    APPOINTMENT_FOLLOW_UP
    CONSULTATION
    SURGERY
    EXAM
    MEETING
    OTHER
}

model EventCalendar extends Asset {
    title         String
    description   String?
    start         DateTime
    end           DateTime
    allDay        Boolean?           @default(false)
    eventType     EventCalendarType?
    rrule         String?

    appointmentId String?            @unique
    appointment   Appointment?       @relation(fields: [appointmentId], references: [id], onDelete: Cascade)

    // Allow patients to read their own appointments
    @@allow('read', appointment.patient.userId == auth().userId)

    @@map("event_calendar")
}